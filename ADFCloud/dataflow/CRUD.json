{
	"name": "CRUD",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "datos_origen",
						"type": "DatasetReference"
					},
					"name": "hkbOrigen"
				},
				{
					"dataset": {
						"referenceName": "hkbDestino",
						"type": "DatasetReference"
					},
					"name": "hkbDestino"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "hkbDestino",
						"type": "DatasetReference"
					},
					"name": "destinoH"
				},
				{
					"dataset": {
						"referenceName": "hkbDestino",
						"type": "DatasetReference"
					},
					"name": "destinoK"
				},
				{
					"dataset": {
						"referenceName": "hkbDestino",
						"type": "DatasetReference"
					},
					"name": "destinoB"
				}
			],
			"transformations": [
				{
					"name": "md5"
				},
				{
					"name": "select1"
				},
				{
					"name": "ordenar1"
				},
				{
					"name": "select2"
				},
				{
					"name": "ordenar2"
				},
				{
					"name": "FullMergejoin"
				},
				{
					"name": "conditionalSplit"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterNEW"
				},
				{
					"name": "fechaFin"
				},
				{
					"name": "alterDelete"
				},
				{
					"name": "fechamodificacion"
				},
				{
					"name": "alterChange"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as long,",
				"          NAME as string,",
				"          NUMERICID as integer,",
				"          QUALITY as integer,",
				"          TIMESTAMP as timestamp,",
				"          VALUE as double,",
				"          CREACION as timestamp,",
				"          ACTUALIZACION as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> hkbOrigen",
				"source(output(",
				"          ID as long,",
				"          ID_HKB as long,",
				"          NAME as string,",
				"          NUMERICID as integer,",
				"          QUALITY as integer,",
				"          TIMESTAMP as timestamp,",
				"          VALUE as decimal(18,2),",
				"          FLG_ACTV as integer,",
				"          FECHA_INI_ACTV as timestamp,",
				"          FECHA_FIN_ACTV as timestamp,",
				"          ETL_DATE as timestamp,",
				"          CREATE_ID_WKF as long,",
				"          UPDATE_ID_WKF as long,",
				"          DELETE_ID_WKF as long,",
				"          CREATE_DATE as timestamp,",
				"          UPDATE_DATE as timestamp,",
				"          DELETE_DATE as timestamp,",
				"          CREATE_USER as string,",
				"          UPDATE_USER as string,",
				"          DELETE_USER as string,",
				"          MD5_CHECKSUM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from destino_HKB\\nwhere flg_actv =1',",
				"     format: 'query') ~> hkbDestino",
				"hkbOrigen derive(MD5_CHECKSUM = md5(NAME,NUMERICID,QUALITY,TIMESTAMP,VALUE,CREACION,ACTUALIZACION)) ~> md5",
				"md5 select(mapColumn(",
				"          O_ID = ID,",
				"          O_NAME = NAME,",
				"          O_NUMERICID = NUMERICID,",
				"          O_QUALITY = QUALITY,",
				"          O_TIMESTAMP = TIMESTAMP,",
				"          O_VALUE = VALUE,",
				"          O_CREACION = CREACION,",
				"          O_ACTUALIZACION = ACTUALIZACION,",
				"          O_MD5_CHECKSUM = MD5_CHECKSUM",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sort(asc(O_TIMESTAMP, true)) ~> ordenar1",
				"hkbDestino select(mapColumn(",
				"          D_ID = ID,",
				"          D_ID_HKB = ID_HKB,",
				"          D_NAME = NAME,",
				"          D_NUMERICID = NUMERICID,",
				"          D_QUALITY = QUALITY,",
				"          D_TIMESTAMP = TIMESTAMP,",
				"          D_VALUE = VALUE,",
				"          D_FLG_ACTV = FLG_ACTV,",
				"          D_FECHA_INI_ACTV = FECHA_INI_ACTV,",
				"          D_FECHA_FIN_ACTV = FECHA_FIN_ACTV,",
				"          D_ETL_DATE = ETL_DATE,",
				"          D_CREATE_ID_WKF = CREATE_ID_WKF,",
				"          D_UPDATE_ID_WKF = UPDATE_ID_WKF,",
				"          D_DELETE_ID_WKF = DELETE_ID_WKF,",
				"          D_CREATE_DATE = CREATE_DATE,",
				"          D_UPDATE_DATE = UPDATE_DATE,",
				"          D_DELETE_DATE = DELETE_DATE,",
				"          D_CREATE_USER = CREATE_USER,",
				"          D_UPDATE_USER = UPDATE_USER,",
				"          D_DELETE_USER = DELETE_USER,",
				"          D_MD5_CHECKSUM = MD5_CHECKSUM",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sort(asc(D_TIMESTAMP, true)) ~> ordenar2",
				"ordenar1, ordenar2 join(O_TIMESTAMP == D_TIMESTAMP,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FullMergejoin",
				"FullMergejoin split(isNull(D_ID_HKB),",
				"     isNull(O_ID),",
				"     iif(O_MD5_CHECKSUM!=D_MD5_CHECKSUM, true(), false()),",
				"     disjoint: false) ~> conditionalSplit@(New, Delete, Change)",
				"conditionalSplit@New derive(D_FLG_ACTV = 1,",
				"          D_FECHA_INI_ACTV = fromUTC(currentTimestamp(), \"Europe/Madrid\"),",
				"          D_ETL_DATE = fromUTC(currentTimestamp(), \"Europe/Madrid\"),",
				"          D_CREATE_DATE = fromUTC(currentTimestamp(), \"Europe/Madrid\"),",
				"          D_CREATE_USER = \"AQ_AZURE\") ~> derivedColumn1",
				"conditionalSplit@New alterRow(insertIf(true())) ~> alterNEW",
				"conditionalSplit@Delete derive(D_DELETE_DATE = fromUTC(currentTimestamp(), \"Europe/Madrid\")) ~> fechaFin",
				"fechaFin alterRow(updateIf(true())) ~> alterDelete",
				"conditionalSplit@Change derive(D_FLG_ACTV = 0,",
				"          D_FECHA_FIN_ACTV = fromUTC(currentTimestamp(), \"Europe/Madrid\"),",
				"          D_ETL_DATE = fromUTC(currentTimestamp(), \"Europe/Madrid\"),",
				"          D_UPDATE_DATE = fromUTC(currentTimestamp(), \"Europe/Madrid\"),",
				"          D_UPDATE_USER = \"AQ_AZURE\") ~> fechamodificacion",
				"fechamodificacion alterRow(updateIf(true())) ~> alterChange",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as long,",
				"          ID_HKB as long,",
				"          NAME as string,",
				"          NUMERICID as integer,",
				"          QUALITY as integer,",
				"          TIMESTAMP as timestamp,",
				"          VALUE as decimal(18,2),",
				"          FLG_ACTV as integer,",
				"          FECHA_INI_ACTV as timestamp,",
				"          FECHA_FIN_ACTV as timestamp,",
				"          ETL_DATE as timestamp,",
				"          CREATE_ID_WKF as long,",
				"          UPDATE_ID_WKF as long,",
				"          DELETE_ID_WKF as long,",
				"          CREATE_DATE as timestamp,",
				"          UPDATE_DATE as timestamp,",
				"          DELETE_DATE as timestamp,",
				"          CREATE_USER as string,",
				"          UPDATE_USER as string,",
				"          DELETE_USER as string,",
				"          MD5_CHECKSUM as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ID_HKB = O_ID,",
				"          NAME = O_NAME,",
				"          NUMERICID = O_NUMERICID,",
				"          QUALITY = O_QUALITY,",
				"          TIMESTAMP = O_TIMESTAMP,",
				"          VALUE = O_VALUE,",
				"          FLG_ACTV = D_FLG_ACTV,",
				"          FECHA_INI_ACTV = D_FECHA_INI_ACTV,",
				"          ETL_DATE = D_ETL_DATE,",
				"          CREATE_DATE = D_CREATE_DATE,",
				"          CREATE_USER = D_CREATE_USER,",
				"          UPDATE_USER = D_UPDATE_USER,",
				"          MD5_CHECKSUM = O_MD5_CHECKSUM",
				"     )) ~> destinoH",
				"alterDelete sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as long,",
				"          ID_HKB as long,",
				"          NAME as string,",
				"          NUMERICID as integer,",
				"          QUALITY as integer,",
				"          TIMESTAMP as timestamp,",
				"          VALUE as decimal(18,2),",
				"          FLG_ACTV as integer,",
				"          FECHA_INI_ACTV as timestamp,",
				"          FECHA_FIN_ACTV as timestamp,",
				"          ETL_DATE as timestamp,",
				"          CREATE_ID_WKF as long,",
				"          UPDATE_ID_WKF as long,",
				"          DELETE_ID_WKF as long,",
				"          CREATE_DATE as timestamp,",
				"          UPDATE_DATE as timestamp,",
				"          DELETE_DATE as timestamp,",
				"          CREATE_USER as string,",
				"          UPDATE_USER as string,",
				"          DELETE_USER as string,",
				"          MD5_CHECKSUM as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ID_HKB = D_ID,",
				"          DELETE_DATE = D_DELETE_DATE",
				"     )) ~> destinoK",
				"alterChange sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as long,",
				"          ID_HKB as long,",
				"          NAME as string,",
				"          NUMERICID as integer,",
				"          QUALITY as integer,",
				"          TIMESTAMP as timestamp,",
				"          VALUE as decimal(18,2),",
				"          FLG_ACTV as integer,",
				"          FECHA_INI_ACTV as timestamp,",
				"          FECHA_FIN_ACTV as timestamp,",
				"          ETL_DATE as timestamp,",
				"          CREATE_ID_WKF as long,",
				"          UPDATE_ID_WKF as long,",
				"          DELETE_ID_WKF as long,",
				"          CREATE_DATE as timestamp,",
				"          UPDATE_DATE as timestamp,",
				"          DELETE_DATE as timestamp,",
				"          CREATE_USER as string,",
				"          UPDATE_USER as string,",
				"          DELETE_USER as string,",
				"          MD5_CHECKSUM as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ID_HKB = D_ID_HKB,",
				"          FLG_ACTV = D_FLG_ACTV,",
				"          FECHA_FIN_ACTV = D_FECHA_FIN_ACTV,",
				"          ETL_DATE = D_ETL_DATE,",
				"          UPDATE_DATE = D_UPDATE_DATE,",
				"          UPDATE_USER = D_UPDATE_USER,",
				"          MD5_CHECKSUM = O_MD5_CHECKSUM",
				"     )) ~> destinoB"
			]
		}
	}
}